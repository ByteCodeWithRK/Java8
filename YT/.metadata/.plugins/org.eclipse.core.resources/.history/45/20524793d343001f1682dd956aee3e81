package com.java8.advanced;

import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.Function;
import java.util.function.IntConsumer;
import java.util.function.LongPredicate;
import java.util.function.Predicate;

public class OtherFunctionalInterfaces {

	public static void main(String[] args) {
		
		/*
		 * 1. Bi<FunctionalInterface>
		 * 2. <SS><FunctionalInterface> i.e., IntConsumer, IntSupplier
		 * 3. Obj<SS><FunctionalInterface>
		 * 4. To<SS><FunctionalInterface>
		 * 5. <SS>To<XX><FunctionalInterface>
		 * Here SS and XX represents any datatype like Integer, Long, 
		 * Float, Double, Boolean
		 */
		
		/*
		 * 1. Bi<FunctionalInterface>
		 * Def: It will take extra input parameter as an input to the 
		 *      functional interface
		 *   i. It is not applicable for all the functional interfaces
		 *      Supplier, UnaryOperator and BinaryOperator
		 *   ii. Applicable for Consumer, Predicate and Function interfaces
		 *      
		 */
		biFunctionalInterfaces();
		
		/*
		 * 2. <SS><FunctionalInterface> i.e., IntConsumer, IntSupplier
		 *  
		 */
		wrapperTypeFunctionalInterfaces();
		
		/*
		 * 3. Obj<SS><FunctionalInterface>
		 *  Def : It takes 2 inputs and of type Object and wrapper type 
		 *  and return nothing
		 *  
		 *  It is applicable for consumer functional interface only
		 */
		//objectAndWrapperTypeInputFunctionalInterfaces();
		
		
		
		/*
		 * To<SS><FunctionalInterface>
		 * Def:
		 */
		
		Supplier
		
		
		
		
		
		
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	private static void wrapperTypeFunctionalInterfaces() {
		DoubleConsumer sscon = (param1) ->{
			System.out.println("IntConsumer::"+param1);
		};
		sscon.accept(10);
		
		LongPredicate longPre = (param1) ->{
			return param1 == 10;
			
		};
		System.out.println("LongPredicate::"+longPre.test(10));

	}

	private static void biFunctionalInterfaces() {
		
		BiFunction<Integer, Integer, Integer> bifun = (param1, param2) ->{
			return param1*param2;
		};
		System.out.println("BiFunction::"+bifun.apply(10,10));
		
		BiConsumer<Integer, Integer> bicon = (param1, param2) ->{
			System.out.println("BiConsumer::"+(param1+param2));
		};
		bicon.accept(10,20);
		
		BiPredicate<String,Integer> bipre = (param1, param2) ->{
			return param1.length() ==param2;
		};
		System.out.println("BiPredicate::"+bipre.test("ByteCodeWithRK",14));
	
		
		
	}

}























/*
 * 1. Bi<FunctionalInterface>
 * 2. XX<Functional Interface>
 * 3. ObjectXX<FunctionalInterface>
 * 4. ToXX<FunctionalInterface>
 * 5. XXToXX<FunctionalInterface>
 * 
 * Here XX represent wrapper classes like Integer, Long,Float
 *  Double, String, Boolean types.
 * 
 */
//Bi<FunctionalInterface>